####merge STAR output cout ####
#ff <- list.files(pattern = "*ReadsPerGene.out.tab$", full.names =F)
ff <- list.files(pattern = "*.txt$", full.names =F)
write.table(ff ,file="colnames.txt",row.names=F, sep="\t")
#newff <- read.table("colnames_stages.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
newff <- read.table("colnames_tissue.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
ffnew<-as.factor(newff$V1)
counts.files <- lapply( ff, read.table, skip = 4 )
counts <- as.data.frame( sapply( counts.files, function(x) x[ ,2] ) )
colnames(counts) <- ffnew
row.names(counts) <- counts.files[[1]]$V1
#write.table(counts ,file=paste("DeStage","_Exp_count.txt",sep=""),row.names=T, sep="\t")
#### end

############ https://www.biostars.org/p/166838/ ### online methods
##rpkm normalization by edgeR packag
# i need a file containing gene length that i extracted from featurecounts tool output
# reading gene length file
mycounts1 <- read.csv("length.txt", stringsAsFactors = FALSE)
# read as numeric
mycounts1 <- as.numeric(mycounts1$Length)
# transposing the gene length file
tmycounts1 <- t(mycounts1)
# setting as numeric
sapply(tmycounts1, class)
# reading the rawcounts file
mycounts <- read.table("rawcounts.txt", header = T, sep = "\t")
# watching the head of uploaded file
head(mycounts[,1:4])
# watching the dimension of matrix
dim(mycounts)
# assigning the column one as mycounts rowname
rownames(mycounts)<- mycounts[,1]
# read as matrix
as.matrix(mycounts)
# viewing mycounts class
class(mycounts)
# setting as numeric
sapply(mycounts, class)
# removing the column on
mycounts <- mycounts[,-1]
# watching the head of rawcounts file
head(mycounts[,1:4])
# applying edgeR function
library(edgeR)
# assigning the rawcounts to a new variable
d <- DGEList(counts=mycounts)
# reading gene length file as a matrix
d$genes$Length <- c(tmycounts1)
# rpkm function
mycounts <- rpkm(d)
# writing the result
write.table(mycounts, file = "rpkm.txt", dec = ".", sep = "\t", quote = FALSE)

#### end


Soyban Development stages analysis
DeStagecounts<-read.table("DeStage_Exp_count.txt", header=T,row.names=1, sep="\t")
con <- file("Biosample_Develop_Stages.txt", "r", blocking = FALSE)
DeStages= readLines(con)## GSE names in GPL4592
close(con)
dgList <- DGEList(counts=DeStagecounts, genes=rownames(DeStagecounts))
dgList <- calcNormFactors(dgList)
exon.lengths2<-read.table("STAR_gene_length.txt", header=F,row.names=1, sep="\t")
exon.lengths3<-as.numeric(exon.lengths2$V2)
dgList$genes$Length <- exon.lengths3
DeStagerpkmMatrix <- rpkm(dgList)
newff <- read.table("colnames_stages.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
#newff <- read.table("colnames_tissue.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
ffnew<-as.factor(newff$V1)
colnames(DeStagerpkmMatrix) <- ffnew

#### get sample number of each type of Tissue/Devstage
TDnum<-c()
for(i in 1:length(DeStages))
{
inx<-which(colnames(DeStagerpkmMatrix)==DeStages[i])
TDnum<-c(TDnum,length(inx))
}
barplot(TDnum,horiz=F,main="Sample number of each Development Stages",xlab="Development Stages", ylab="Counts", col=rainbow(length(DeStages)),names.arg=DeStages,las=2)#las change label direction
pie(TDnumï¼Œlabels = DeStages, col=rainbow(length(DeStages)),main="Sample Number of each Development Stages")

#### mean rpkm values for each Tiss/Devstage
fReplicateMean <- function(rpkmMat,DeStages,thrs) #Thrs: threshold
{
x<-matrix(, nrow = dim(rpkmMat)[1], ncol =length(DeStages))
for(i in 1:length(DeStages))
{
#x[,i]<-rowMeans(rpkmMat[,regexpr(DeStages[i],colnames(rpkmMat))>0])# some Tiss/Devstages with only one sample
inx<-which(colnames(rpkmMat)==DeStages[i])## get postions
if(length(inx)>1)
{
x[,i]<-rowMeans(rpkmMat[,inx])# some Tiss/Devstages with only one sample
}else
{
x[,i]<-rpkmMat[,inx]
}
}
colnames(x)<-DeStages
rownames(x)<-rownames(rpkmMat)
x[x<thrs]<-1
x<-log2(x)
return(x)
}

#Function require a vector with expression of one gene in different tissues.
#If expression for one tissue is not known, gene specificity for this gene is NA
#Minimum 2 tissues
fTau <- function(x)
{
	if(all(!is.na(x)))
 	{
 		if(min(x, na.rm=TRUE) >= 0)
		{
 			if(max(x)!=0)
 			{
 				x <- (1-(x/max(x)))
 				res <- sum(x, na.rm=TRUE)
 				res <- res/(length(x)-1)
 			} else {
 				res <- 0
 			}
 		} else {
 		res <- NA
 		#print("Expression values have to be positive!")
 		} 
 	} else {
 		res <- NA
 		#print("No data for this gene avalable.")
 	} 
 	return(res)
}
###***###***###
DeStagerpkmMatrixmean<-fReplicateMean(DeStagerpkmMatrix,DeStages,1)
print(summary(DeStagerpkmMatrixmean))
geTau <- apply(DeStagerpkmMatrixmean, 1, fTau) # 1 means row direction,get a one way vector, max 1 means genes only expressed in one tissue,genes with express value !=0.
#### filter tissue specifity genes from Tau resuls
TsG<-function(NorM,Tauvalue,thrsF)#NorM is fReplicateMean normalized matrix,thrsF if gene filter threshold thrsF=1 means strictly Tissue specifity expression, ie expression only in one Tissue/DeStage
{
GM<-matrix(list(),nrow = dim(NorM)[2], ncol =1)# GM is the genes in each Tiss/Devstage
for(i in 1:length(geTau))
{
if(geTau[i]>=thrsF)
{
gExVs<-NorM[i,] # get all exp values of the gene 
if(thrsF==1)
{
tempMax<-max(gExVs)
indx<-which(gExVs==tempMax)
temp<-c(GM[[indx]],rownames(NorM)[i])
GM[[indx]]<-temp
}else
{
tempQ<-quantile(gExVs)[4]# 75% quantile value
indx2<-which(gExVs>tempQ)
for(j in 1:length(indx2))
{
temp<-c(GM[[indx2[j]]],rownames(NorM)[i])
GM[[indx2[j]]]<-temp
}
}
}
}
return (GM)
}

DeStageresults<-TsG(DeStagerpkmMatrixmean,geTau,0.9)
write.table(DeStageresults,file="DeStageresults.txt",row.names=T,sep="\t")

#Figures for Devestage Specific genes
### Figure 1: geTau thrs change and tissue specific gene number
thrs<-c(1,0.95,0.9,0.85,0.8)
GNum<-matrix(,nrow=length(DeStages),ncol=length(thrs))
col<-1 # col number
for(val in thrs)
{
DeStageresults<-TsG(DeStagerpkmMatrixmean,geTau,val)
temp<-c()
for(i in 1:length(DeStageresults))
{
temp<-c(temp,length(DeStageresults[[i]]))
}
GNum[,col]<-temp
col<-col+1
}
rownames(GNum)<-DeStages
colnames(GNum)<-thrs
write.table(GNum,file="Devstage specific GeneNumber under diff thrs.txt",row.names=T,sep="\t")
barplot(GNum, beside=T,main="Develop stages gene specific number under different threshold", col=rainbow(length(DeStages)),xlab="threshold",ylab="counts")#las change label direction)
## we choose thrs=0.9 ,0.8 is usually as others do.
### Figure 2: Total number of genes detetected in develop stages, and their appear times
DeStageresults<-TsG(DeStagerpkmMatrixmean,geTau,0.9)
#write.table(DeStageresults,file="DeStageresults_0.9.txt",row.names=T,sep="\t")
GApp<-c()
for(i in 1:length(DeStageresults))
{
GApp<-c(GApp,DeStageresults[[i]])
}
DevGene<-unique(GApp) ## with thrs=0.9 we get total 5838 genes with Develop stages specific
Ap<-c()
ApM<-matrix(,nrow=length(DevGene),ncol=1)
for(i in 1:length(DevGene))
{
teminx<-which(GApp==DevGene[i])
Ap<-c(Ap,length(teminx))
}
ApM[,1]<-Ap
rownames(ApM)<-DevGene
colnames(ApM)<-"Count"
write.table(ApM,file="Gene Appearance Times in Devstage.txt",row.names=T,sep="\t")

ApT<-unique(Ap)
GApT<-c()
GApTM<-matrix(,nrow=length(ApT),ncol=1)
for(i in 1:length(ApT))
{
teminx<-which(Ap==ApT[i])
GApT<-c(GApT,length(teminx))
}
GApTM[,1]<-GApT
rownames(GApTM)<-ApT
colnames(GApTM)<-"Gene Number"
write.table(GApTM,file="Gene Appearance Times in Devstage statistic.txt",row.names=T,sep="\t")


#### Figure3: Common genes between any two devstage, clustered heatmap 
ComGMatrix<-matrix(0,nrow = length(DeStages), ncol =length(DeStages))
for(i in 1:length(DeStageresults))
{
for(j in i:length(DeStageresults))
{
temcom<-length(intersect(DeStageresults[[i]],DeStageresults[[j]]))
ComGMatrix[i,j]<-temcom 
ComGMatrix[j,i]<-temcom
}
}
library("gplots")
#result <- heatmap.2(mtscaled, Rowv=T, scale='none', dendrogram="row", symm = T, col = brewer.pal(9,"Reds"))
library(ComplexHeatmap)
colnames(ComGMatrix)<-DeStages
rownames(ComGMatrix)<-DeStages
Heatmap(ComGMatrix, name = "Common Genes between different DevStages", row_names_gp = gpar(fontsize = 6),column_names_gp = gpar(fontsize = 6))


#### GO enrichment of each Devstage specific genes
library(topGO)
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/geneid2go2.map")
probeNames <- names(geneID2GO)
for(i in 1:length(DeStageresults))
{
AllDifg= DeStageresults[[i]]
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste("Gene_Devstage",i,"_Gene_GO_Enrichment.txt",sep=""),row.names = FALSE, col.names =TRUE)
}



######SOybean RNAseq Tissue analysis

Soyban Tissue analysis

Tissuecounts<-read.table("Tissue_Exp_count.txt", header=T,row.names=1, sep="\t")
con <- file("Biosample_Tissues.txt", "r", blocking = FALSE)
Tissues= readLines(con)## RNAseq Tissues
close(con)
dgList <- DGEList(counts=Tissuecounts, genes=rownames(Tissuecounts))
dgList <- calcNormFactors(dgList)
exon.lengths2<-read.table("STAR_gene_length.txt", header=F,row.names=1, sep="\t")
exon.lengths3<-as.numeric(exon.lengths2$V2)
dgList$genes$Length <- exon.lengths3
TissuerpkmMatrix <- rpkm(dgList)
#newff <- read.table("colnames_stages.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
newff <- read.table("colnames_tissue.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
ffnew<-as.factor(newff$V1)
colnames(TissuerpkmMatrix) <- ffnew

#### get sample number of each type of Tissue/Devstage
TDnum<-c()
TDnumM<-matrix(,nrow=length(Tissues),ncol=1)
for(i in 1:length(Tissues))
{
inx<-which(colnames(TissuerpkmMatrix)==Tissues[i])
TDnum<-c(TDnum,length(inx))
}
TDnumM[,1]<-TDnum
rownames(TDnumM)<-Tissues
colnames(TDnumM)<-"Sample Number"
write.table(TDnumM,file="Sample number of each tissue.txt",row.names=T,sep="\t")
barplot(TDnum,horiz=F,main="Sample number of each Tissues",xlab="Tissues", ylab="Counts", col=rainbow(length(Tissues)),names.arg=Tissues,las=2)#las change label direction
pie(TDnumï¼Œlabels = Tissues, col=rainbow(length(Tissues)),main="Sample Number of each Tissue")

#### mean rpkm values for each Tissue
fReplicateMean <- function(rpkmMat,DeStages,thrs) #Thrs: threshold
{
x<-matrix(, nrow = dim(rpkmMat)[1], ncol =length(DeStages))
for(i in 1:length(DeStages))
{
#x[,i]<-rowMeans(rpkmMat[,regexpr(DeStages[i],colnames(rpkmMat))>0])# some Tiss/Devstages with only one sample
inx<-which(colnames(rpkmMat)==DeStages[i])## get postions
if(length(inx)>1)
{
x[,i]<-rowMeans(rpkmMat[,inx])# some Tiss/Devstages with only one sample
}else
{
x[,i]<-rpkmMat[,inx]
}
}
colnames(x)<-DeStages
rownames(x)<-rownames(rpkmMat)
x[x<thrs]<-1
x<-log2(x)
return(x)
}

#Function require a vector with expression of one gene in different tissues.
#If expression for one tissue is not known, gene specificity for this gene is NA
#Minimum 2 tissues
fTau <- function(x)
{
	if(all(!is.na(x)))
 	{
 		if(min(x, na.rm=TRUE) >= 0)
		{
 			if(max(x)!=0)
 			{
 				x <- (1-(x/max(x)))
 				res <- sum(x, na.rm=TRUE)
 				res <- res/(length(x)-1)
 			} else {
 				res <- 0
 			}
 		} else {
 		res <- NA
 		#print("Expression values have to be positive!")
 		} 
 	} else {
 		res <- NA
 		#print("No data for this gene avalable.")
 	} 
 	return(res)
}
###***###***###
TissuerpkmMatrixmean<-fReplicateMean(TissuerpkmMatrix,Tissues,1)
print(summary(TissuerpkmMatrixmean))
geTau <- apply(TissuerpkmMatrixmean, 1, fTau) # 1 means row direction,get a one way vector, max 1 means genes only expressed in one tissue,genes with express value !=0.
#### filter tissue specifity genes from Tau resuls
TsG<-function(NorM,Tauvalue,thrsF)#NorM is fReplicateMean normalized matrix,thrsF if gene filter threshold thrsF=1 means strictly Tissue specifity expression, ie expression only in one Tissue/DeStage
{
GM<-matrix(list(),nrow = dim(NorM)[2], ncol =1)# GM is the genes in each Tiss/Devstage
for(i in 1:length(geTau))
{
if(geTau[i]>=thrsF)
{
gExVs<-NorM[i,] # get all exp values of the gene 
if(thrsF==1)
{
tempMax<-max(gExVs)
indx<-which(gExVs==tempMax)
temp<-c(GM[[indx]],rownames(NorM)[i])
GM[[indx]]<-temp
}else
{
tempQ<-quantile(gExVs)[4]# 75% quantile value
indx2<-which(gExVs>tempQ)
for(j in 1:length(indx2))
{
temp<-c(GM[[indx2[j]]],rownames(NorM)[i])
GM[[indx2[j]]]<-temp
}
}
}
}
return (GM)
}

Tissueresults<-TsG(TissuerpkmMatrixmean,geTau,0.9)
write.table(Tissueresults,file="Tissueresults.txt",row.names=T,sep="\t")

#Figures for Tissue Specific genes
### Figure 1: geTau thrs change and tissue specific gene number
thrs<-c(1,0.95,0.9,0.85,0.8)
GNum<-matrix(,nrow=length(Tissues),ncol=length(thrs))
col<-1 # col number
for(val in thrs)
{
Tissueresults<-TsG(TissuerpkmMatrixmean,geTau,val)
temp<-c()
for(i in 1:length(Tissueresults))
{
temp<-c(temp,length(Tissueresults[[i]]))
}
GNum[,col]<-temp
col<-col+1
}
rownames(GNum)<-Tissues
colnames(GNum)<-thrs
write.table(GNum,file="Tissue specific GeneNumber under diff thrs.txt",row.names=T,sep="\t")
barplot(GNum, beside=T,main="Tissue gene specific number under different threshold", col=rainbow(length(Tissues)),xlab="threshold",ylab="counts")#las change label direction)
## we choose thrs=0.9 ,0.8 is usually as others do.
### Figure 2: Total number of genes detetected in Tissues, and their appear times
Tissueresults<-TsG(TissuerpkmMatrixmean,geTau,0.9)
#write.table(Tissueresults,file="Tissueresults0.9.txt",row.names=T,sep="\t")
GApp<-c()
for(i in 1:length(Tissueresults))
{
GApp<-c(GApp,Tissueresults[[i]])
}
TissGene<-unique(GApp) ## with thrs=0.9 we get total 5838 genes with Develop stages specific
Ap<-c()
ApM<-matrix(,nrow=length(TissGene),ncol=1)
for(i in 1:length(TissGene))
{
teminx<-which(GApp==TissGene[i])
Ap<-c(Ap,length(teminx))
}
ApM[,1]<-Ap
rownames(ApM)<-TissGene
colnames(ApM)<-"Count"
write.table(ApM,file="Gene Appearance Times in Tissues.txt",row.names=T,sep="\t")

ApT<-unique(Ap)
GApT<-c()
GApTM<-matrix(,nrow=length(ApT),ncol=1)
for(i in 1:length(ApT))
{
teminx<-which(Ap==ApT[i])
GApT<-c(GApT,length(teminx))
}
GApTM[,1]<-GApT
rownames(GApTM)<-ApT
colnames(GApTM)<-"Gene Number"
write.table(GApTM,file="Gene Appearance Times in Tissues statistic.txt",row.names=T,sep="\t")


#### Figure3: Common genes between any two tissues, clustered heatmap 
ComGMatrix<-matrix(0,nrow = length(Tissues), ncol =length(Tissues))
for(i in 1:length(Tissueresults))
{
for(j in i:length(Tissueresults))
{
temcom<-length(intersect(Tissueresults[[i]],Tissueresults[[j]]))
ComGMatrix[i,j]<-temcom 
ComGMatrix[j,i]<-temcom
}
}
library("gplots")
#result <- heatmap.2(mtscaled, Rowv=T, scale='none', dendrogram="row", symm = T, col = brewer.pal(9,"Reds"))
library(ComplexHeatmap)
colnames(ComGMatrix)<-Tissues
rownames(ComGMatrix)<-Tissues
Heatmap(ComGMatrix, name = "Common Genes between different Tissues", row_names_gp = gpar(fontsize = 6),column_names_gp = gpar(fontsize = 6))


#### GO enrichment of each tissue specific SSPs
library(topGO)
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/geneid2go2.map")
probeNames <- names(geneID2GO)
for(i in 1:length(Tissueresults))
{
AllDifg= Tissueresults[[i]]
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste("Gene_Tissue",i,"_Gene_GO_Enrichment.txt",sep=""),row.names = FALSE, col.names =TRUE)
}




















##### find common elements
com<-intersect(GMresults[58],GMresults[58])






###tissue
Tisnum<-c()
for(i in 1:length(tissuesNames))
{
inx<-which(colnames(rpkmMatrix)==tissuesNames[i])
Tisnum<-c(Tisnum,length(inx))
}
barplot(Tisnum)
pie(Tisnum)


#### end






##### edgeR Diff code ####
#counts<-read.table("DeStage_Exp_count.txt", header=T,row.names=1, sep="\t")
dgList <- DGEList(counts=counts, genes=rownames(counts))
dgList <- calcNormFactors(dgList)
### get gene length ####
library(GenomicFeatures)
glyc <- makeTxDbFromGFF("Glycine_max.Glycine_max_v2.0.41.gtf", format="gtf")
exonic <- exonsBy(glyc, by="gene")
red.exonic <- reduce(exonic)
exon.lengths <- sum(width(red.exonic)) ## gene order not same with our STAR results, needed be reordered.
write.table(exon.lengths ,file="gene_length.txt",row.names=T, sep="\t")
#### end

exon.lengths2<-read.table("STAR_gene_length.txt", header=F,row.names=1, sep="\t")
exon.lengths3<-as.numeric(exon.lengths2$V2)
dgList$genes$Length <- exon.lengths3
rpkmMatrix <- rpkm(dgList)
#write.table(rpkmMatrix ,file="DeStage_rpkm.txt",row.names=T, sep="\t")
#write.table(rpkmMatrix ,file="Tissue_rpkm.txt",row.names=T, sep="\t")

#### get mean values for each Tissue/Devstage#####
con <- file("Biosample_Tissues.txt", "r", blocking = FALSE)
tissuesNames= readLines(con)## GSE names in GPL4592
close(con)

con <- file("Biosample_Develop_Stages.txt", "r", blocking = FALSE)
DeStages= readLines(con)## GSE names in GPL4592
close(con)

con <- file("GEO_Sample_Source.txt", "r", blocking = FALSE)
geosource= readLines(con)## GSE names in GPL4592
close(con)

### combined GEO
con <- file("GEO_Combined_SourceNames.txt", "r", blocking = FALSE)
geosource= readLines(con)##
close(con)


### functions ####
#### mean rpkm values for each Tiss/Devstage
fReplicateMean <- function(rpkmMat,DeStages,thrs) #Thrs: threshold
{
x<-matrix(, nrow = dim(rpkmMat)[1], ncol =length(DeStages))
for(i in 1:length(DeStages))
{
#x[,i]<-rowMeans(rpkmMat[,regexpr(DeStages[i],colnames(rpkmMat))>0])# some Tiss/Devstages with only one sample
inx<-which(colnames(rpkmMat)==DeStages[i])## get postions
if(length(inx)>1)
{
x[,i]<-rowMeans(rpkmMat[,inx])# some Tiss/Devstages with only one sample
}else
{
x[,i]<-rpkmMat[,inx]
}
}
colnames(x)<-DeStages
rownames(x)<-rownames(rpkmMat)
x[x<thrs]<-1
x<-log2(x)
return(x)
}

### for GEO microarray
fReplicateMeangeo <- function(gcrma,SorName,thrs) #Thrs: threshold
{
x<-matrix(, nrow = dim(gcrma)[1], ncol =length(SorName))
for(i in 1:length(SorName))
{
inx<-which(colnames(gcrma)==SorName[i])## get postions
if(length(inx)>1)
{
x[,i]<-rowMeans(gcrma[,inx])# some Tiss/Devstages with only one sample
}else
{
#print(i)
x[,i]<-gcrma[,inx]
}
}
colnames(x)<-SorName
rownames(x)<-rownames(gcrma)
x[x<thrs]<-0
return(x)
}

newff <- read.table("GEO_Combined_colnames.txt", head=F,sep="\t") #get Tiss/Dev corresponding names
ffnew<-as.factor(newff$V1)

GEOCom<-fReplicateMeangeo(gcrmaGEO,geosource,1)
write.table(GEOCom ,file="GEO_source_rpkm.txt",row.names=T, sep="\t")
print(summary(GEOCom))
geTau <- apply(GEOCom, 1, fTau) # 1 means row direction,get a one way vector, max 1 means genes only expressed in one tissue,genes with express value !=0.


#### get sample number of each type of Tissue/Devstage
TDnum<-c()
for(i in 1:length(DeStages))
{
inx<-which(colnames(rpkmMatrix)==DeStages[i])
TDnum<-c(TDnum,length(inx))
}
barplot(TDnum)
pie(TDnum)

###tissue
Tisnum<-c()
for(i in 1:length(tissuesNames))
{
inx<-which(colnames(rpkmMatrix)==tissuesNames[i])
Tisnum<-c(Tisnum,length(inx))
}
barplot(Tisnum)
pie(Tisnum)


#### end




#Function require a vector with expression of one gene in different tissues.
#If expression for one tissue is not known, gene specificity for this gene is NA
#Minimum 2 tissues
fTau <- function(x)
{
	if(all(!is.na(x)))
 	{
 		if(min(x, na.rm=TRUE) >= 0)
		{
 			if(max(x)!=0)
 			{
 				x <- (1-(x/max(x)))
 				res <- sum(x, na.rm=TRUE)
 				res <- res/(length(x)-1)
 			} else {
 				res <- 0
 			}
 		} else {
 		res <- NA
 		#print("Expression values have to be positive!")
 		} 
 	} else {
 		res <- NA
 		#print("No data for this gene avalable.")
 	} 
 	return(res)
}
###***###***###
test<-fReplicateMean(rpkmMatrix3,DeStages2,1)
print(summary(test))
geTau <- apply(test, 1, fTau) # 1 means row direction,get a one way vector, max 1 means genes only expressed in one tissue,genes with express value !=0.
#test$Tau <- apply(orgExpression[,c(paste("Averaged.RPKM.", tissuesNames[1:nTissues], sep=""))], 1, fTau)

#### filter tissue specifity genes from Tau resuls
TsG<-function(NorM,Tauvalue,thrsF)#NorM is fReplicateMean normalized matrix,thrsF if gene filter threshold thrsF=1 means strictly Tissue specifity expression, ie expression only in one Tissue/DeStage
{
GM<-matrix(list(),nrow = dim(NorM)[2], ncol =1)# GM is the genes in each Tiss/Devstage
for(i in 1:length(geTau))
{
if(geTau[i]>=thrsF)
{
gExVs<-NorM[i,] # get all exp values of the gene 
if(thrsF==1)
{
tempMax<-max(gExVs)
indx<-which(gExVs==tempMax)
temp<-c(GM[[indx]],rownames(NorM)[i])
GM[[indx]]<-temp
}else
{
tempQ<-quantile(gExVs)[4]# 75% quantile value
indx2<-which(gExVs>tempQ)
for(j in 1:length(indx2))
{
temp<-c(GM[[indx2[j]]],rownames(NorM)[i])
GM[[indx2[j]]]<-temp
}
}
}
}
return (GM)
}

GMresults<-TsG(Tes,geTau,0.9)

##### find common elements
com<-intersect(GMresults[58],GMresults[58])



###### GEO datasets #reference site: https://wiki.bits.vib.be/index.php/Differential_expression_for_more_than_two_groups
library(gcrma)
library(affy)
library(limma)
mydata <- ReadAffy()
eset <- gcrma(mydata)
#gcrma<-data.matrix(eset)
gcrma<-exprs(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")

gcrmaM<-NULL
Files<-list.files()
Num<-ceiling(length(Files)/100)
for(i in 1:Num)
{
setwd("/Users/sulingtao/Desktop/Test1")
dir.create("TemDir")
begin<-(i-1)*100+1
end<-begin+99
if(begin<length(Files) & end<length(Files))
{
file.copy(Files[begin:end],"TemDir")
setwd("/Users/sulingtao/Desktop/Test1/TemDir")
mydata <- ReadAffy()
eset <- gcrma(mydata)
#gcrma<-data.matrix(eset)
gcrma<-exprs(eset)
gcrmaM<-cbind(gcrmaM,gcrma)
unlink(getwd(), recursive = TRUE)
}else
{
file.copy(Files[begin:length(Files)],"TemDir")
setwd("/Users/sulingtao/Desktop/Test1/TemDir")
mydata <- ReadAffy()
eset <- gcrma(mydata)
#gcrma<-data.matrix(eset)
gcrma<-exprs(eset)
gcrmaM<-cbind(gcrmaM,gcrma)
unlink(getwd(), recursive = TRUE)
}
}

############# install and load required packages ##############

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
library(affycoretools)
library(limma)

############# variables defined ############
GPLName='GPL4592'
############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "geneid2go.map")
#str(head(geneID2GO))
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSEName[-55]## delete GSE61350, it don't have CEL.gz supple file.
GSENum=length(Meta(gpl4592)$series_id)
for(g in 16:GSENum)
{
GEOID=GSEName[g]
tempc="_RAW.tar" #temp char
setwd("C:/Users/sulin/Desktop")
D1=getwd()
D2=paste(D1,GEOID,sep="/")
filePaths = getGEOSuppFiles(GEOID)
setwd(D2)
FN=paste(GEOID,tempc,sep="") # file name
untar(FN)
file.remove(FN)
#mydata <- ReadAffy() ##from raw CEL file to matrix
#pData(mydata)<-read.table(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
pd<-read.AnnotatedDataFrame(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
#Group<- factor(pData(pd)[,2] , levels = levels(pData(pd)[,2])) 
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
#print(c<-c(i,j))
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
write.table(t ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
results <- t[which(t$adj.P.Val < 0.05),]
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}

###############


after all CEL.gz file have been downloaded and filtered, we use the following code:

##### final run code #####

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
library(affycoretools)
library(limma)
library(topGO)
############# variables defined ############
GPLName='GPL4592'
############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSEName[-55]## delete GSE61350, it don't have CEL.gz supple file.
GSENum=length(Meta(gpl4592)$series_id)
for(g in 16:GSENum)
{
GEOID=GSEName[g]
tempc="_RAW.tar" #temp char
setwd("C:/Users/sulin/Desktop")
D1=getwd()
D2=paste(D1,GEOID,sep="/")
filePaths = getGEOSuppFiles(GEOID)
setwd(D2)
FN=paste(GEOID,tempc,sep="") # file name
untar(FN)
file.remove(FN)
#setwd(paste("C:/Users/sulin/Desktop/GEO_CHIP/",GEOID,sep="")) # set work directory to each GSE file folder.
pd<-read.AnnotatedDataFrame(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}
}




##################### GSE78242 ################### 
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("oligo")
library(oligo)
celFiles <- list.celfiles('GSE78242', full.names=TRUE)
######################################


######### GPL4592 all exp matrix mergered #####################

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
#library(affycoretools)
library(limma)
library(topGO)
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
#pd<-read.AnnotatedDataFrame("GPL4592_pd.txt", header=F,row.names=1, sep="\t")
Mat<-read.table("GPL4592_Mergered_Matrix.txt",header=T,row.names=1,sep="\t")
pdinfo<-read.table("GPL4592_pd.txt",, header=F,row.names=1, sep="\t")
Group<- factor(pdinfo[,2] , levels = levels(pdinfo[,2]))
design<- model.matrix(~0+Group,data=Mat)
matrix<-data.matrix(Mat)
#write.table(Matrixtemp ,file="GPL4592_Mergered_Matrix.txt",row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 546:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}





########################################
####GSE11611 ##################

geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
pd<-read.AnnotatedDataFrame("GSE11611_pd_1.txt", header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table("GSE11611_pd_1.txt", header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
#write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in seq(1:(length(colnames(design))-1),3))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+1],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i+1],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}


#################### ArrayExp code ##################
library(affy)
DataID="E-MEXP-876"
mydata <- ReadAffy()
eset <- rma(mydata)
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(DataID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")


######################################
####GSE24145 ##################

geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
pd<-read.AnnotatedDataFrame("GSE24145_pd_1.txt", header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
#hist(mydata)
#boxplot(mydata)
eset <- rma(mydata)
pData(mydata)<-read.table("GSE24145_pd_1.txt", header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,3] , levels = levels(pData(mydata)[,3]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
#write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in seq(1:(length(colnames(design))-1),3))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+1],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i+1],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}





############# Oligo package Raw CEL file process ############
#ref: https://www.bioconductor.org/packages/devel/workflows/vignettes/maEndToEnd/inst/doc/MA-Workflow.html
GPLName='GPL13674'
library(oligo)
library(ArrayExpress)
ArrayExpID<-"E-GEOD-54803"
raw_data_dir <- tempdir()

if (!dir.exists(raw_data_dir)) {
    dir.create(raw_data_dir)
}
anno_AE <- getAE(ArrayExpID, path = raw_data_dir, type = "raw")
sdrf_location <- file.path(raw_data_dir, paste(ArrayExpID,".sdrf.txt",sep=""))
SDRF <- read.delim(sdrf_location)
#rownames(SDRF) <- SDRF$Array.Data.File
rownames(SDRF) <- unique(SDRF$Hybridization.Name)
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(pkgname="pd.soygene.1.0.st",filenames = file.path(raw_data_dir, SDRF$Array.Data.File),verbose = FALSE, phenoData = SDRF) #The function guesses which annotation package to use from the header of the CEL file. The user can also provide the name of the annotaion package to be used (via the pkgname argument). If the annotation package cannot be loaded, the function returns an error. If the annotation package is not available from BioConductor, one can use the pdInfoBuilder package to build one.
stopifnot(validObject(raw_data))
head(Biobase::pData(raw_data))
write.table(pData(raw_data),file=paste(ArrayExpID,"_SampleInfo.txt",sep=""),row.names = TRUE, col.names =TRUE)
#select part columns
#Biobase::pData(raw_data) <- Biobase::pData(raw_data)[, c("Source.Name","Comment..Sample_description.","FactorValue..TREATMENT.")]
#oligo::boxplot(raw_data, target = "core", main = "Boxplot of log2-intensitites for the raw data")
eset <- oligo::rma(raw_data, target = "core")
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(ArrayExpID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")



############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSENum=length(Meta(gpl4592)$series_id)
for(g in 1:1)
{
GEOID=GSEName[g]
setwd(paste("C:/Users/sulin/Desktop/",GEOID,sep="")) # set work directory to each GSE file folder.
pd<-read.AnnotatedDataFrame(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}
}



#sampleType<- rep("Total", ncol(dgList))
#sampleType[grep("Trap", colnames(dgList))] <- "Trap"
#sampleReplicate <- paste("S", rep(1:2, each=3), sep="")
#designMat <- model.matrix(~sampleReplicate)
#dgList <- estimateGLMTrendedDisp(dgList, design=designMat)
#fit <- glmFit(dgList, designMat)
#lrt <- glmLRT(fit)
#edgeR_result <- topTags(lrt,n=15000,sort.by = "PValue",p.value = 0.05)
#write.table(edgeR_result ,file="Mtotal_Vs_MTrap_DEGs.txt",row.names=T, sep="\t")
#### end



#reference site: https://wiki.bits.vib.be/index.php/Differential_expression_for_more_than_two_groups
############# install and load required packages ##############

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
library(affycoretools)
library(limma)

############# variables defined ############
GPLName='GPL4592'
############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "geneid2go.map")
#str(head(geneID2GO))
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSEName[-55]## delete GSE61350, it don't have CEL.gz supple file.
GSENum=length(Meta(gpl4592)$series_id)
for(g in 16:GSENum)
{
GEOID=GSEName[g]
tempc="_RAW.tar" #temp char
setwd("C:/Users/sulin/Desktop")
D1=getwd()
D2=paste(D1,GEOID,sep="/")
filePaths = getGEOSuppFiles(GEOID)
setwd(D2)
FN=paste(GEOID,tempc,sep="") # file name
untar(FN)
file.remove(FN)
#mydata <- ReadAffy() ##from raw CEL file to matrix
#pData(mydata)<-read.table(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
pd<-read.AnnotatedDataFrame(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste(GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
#Group<- factor(pData(pd)[,2] , levels = levels(pData(pd)[,2])) 
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
#print(c<-c(i,j))
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
write.table(t ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
results <- t[which(t$adj.P.Val < 0.05),]
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}

###############


after all CEL.gz file have been downloaded and filtered, we use the following code:

##### final run code #####

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
library(affycoretools)
library(limma)
library(topGO)
############# variables defined ############
GPLName='GPL4592'
############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSEName[-55]## delete GSE61350, it don't have CEL.gz supple file.
GSENum=length(Meta(gpl4592)$series_id)
for(g in 16:GSENum)
{
GEOID=GSEName[g]
tempc="_RAW.tar" #temp char
setwd("C:/Users/sulin/Desktop")
D1=getwd()
D2=paste(D1,GEOID,sep="/")
filePaths = getGEOSuppFiles(GEOID)
setwd(D2)
FN=paste(GEOID,tempc,sep="") # file name
untar(FN)
file.remove(FN)
#setwd(paste("C:/Users/sulin/Desktop/GEO_CHIP/",GEOID,sep="")) # set work directory to each GSE file folder.
pd<-read.AnnotatedDataFrame(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}
}




##################### GSE78242 ################### 
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("oligo")
library(oligo)
celFiles <- list.celfiles('GSE78242', full.names=TRUE)
######################################


######### GPL4592 all exp matrix mergered #####################

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
BiocManager::install("affy")
BiocManager::install("affycoretools")
BiocManager::install("limma")
library(GEOquery)
library(affy)
#library(affycoretools)
library(limma)
library(topGO)
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
#pd<-read.AnnotatedDataFrame("GPL4592_pd.txt", header=F,row.names=1, sep="\t")
Mat<-read.table("GPL4592_Mergered_Matrix.txt",header=T,row.names=1,sep="\t")
pdinfo<-read.table("GPL4592_pd.txt",, header=F,row.names=1, sep="\t")
Group<- factor(pdinfo[,2] , levels = levels(pdinfo[,2]))
design<- model.matrix(~0+Group,data=Mat)
matrix<-data.matrix(Mat)
#write.table(Matrixtemp ,file="GPL4592_Mergered_Matrix.txt",row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 546:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}





########################################
####GSE11611 ##################

geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
pd<-read.AnnotatedDataFrame("GSE11611_pd_1.txt", header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table("GSE11611_pd_1.txt", header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
#write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in seq(1:(length(colnames(design))-1),3))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+1],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i+1],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}


#################### ArrayExp code ##################
library(affy)
DataID="E-MEXP-876"
mydata <- ReadAffy()
eset <- rma(mydata)
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(DataID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")


######################################
####GSE24145 ##################

geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
pd<-read.AnnotatedDataFrame("GSE24145_pd_1.txt", header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
#hist(mydata)
#boxplot(mydata)
eset <- rma(mydata)
pData(mydata)<-read.table("GSE24145_pd_1.txt", header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,3] , levels = levels(pData(mydata)[,3]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
#write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in seq(1:(length(colnames(design))-1),3))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+1],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
temchar<-paste(colnames(design)[i+1],"-",colnames(design)[i+2],sep="")
conlist<-append(conlist,temchar)
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}





############# Oligo package Raw CEL file process ############
#ref: https://www.bioconductor.org/packages/devel/workflows/vignettes/maEndToEnd/inst/doc/MA-Workflow.html
GPLName='GPL13674'
library(oligo)
library(ArrayExpress)
ArrayExpID<-"E-GEOD-54803"
raw_data_dir <- tempdir()

if (!dir.exists(raw_data_dir)) {
    dir.create(raw_data_dir)
}
anno_AE <- getAE(ArrayExpID, path = raw_data_dir, type = "raw")
sdrf_location <- file.path(raw_data_dir, paste(ArrayExpID,".sdrf.txt",sep=""))
SDRF <- read.delim(sdrf_location)
#rownames(SDRF) <- SDRF$Array.Data.File
rownames(SDRF) <- unique(SDRF$Hybridization.Name)
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(pkgname="pd.soygene.1.0.st",filenames = file.path(raw_data_dir, SDRF$Array.Data.File),verbose = FALSE, phenoData = SDRF) #The function guesses which annotation package to use from the header of the CEL file. The user can also provide the name of the annotaion package to be used (via the pkgname argument). If the annotation package cannot be loaded, the function returns an error. If the annotation package is not available from BioConductor, one can use the pdInfoBuilder package to build one.
stopifnot(validObject(raw_data))
head(Biobase::pData(raw_data))
write.table(pData(raw_data),file=paste(ArrayExpID,"_SampleInfo.txt",sep=""),row.names = TRUE, col.names =TRUE)
#select part columns
#Biobase::pData(raw_data) <- Biobase::pData(raw_data)[, c("Source.Name","Comment..Sample_description.","FactorValue..TREATMENT.")]
#oligo::boxplot(raw_data, target = "core", main = "Boxplot of log2-intensitites for the raw data")
eset <- oligo::rma(raw_data, target = "core")
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(ArrayExpID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")



############ Raw data to expression matrix ########
#Getting all Series Records for a Given Platform#######
geneID2GO <- readMappings(file = "C:/Users/sulin/Desktop/GEO_CHIP/geneid2go.map")
probeNames <- names(geneID2GO)
gpl4592 <- getGEO(GPLName)
GSEName=Meta(gpl4592)$series_id
GSENum=length(Meta(gpl4592)$series_id)
for(g in 1:1)
{
GEOID=GSEName[g]
setwd(paste("C:/Users/sulin/Desktop/",GEOID,sep="")) # set work directory to each GSE file folder.
pd<-read.AnnotatedDataFrame(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
mydata <- ReadAffy(filenames=pData(pd)$FileName)
eset <- rma(mydata)
pData(mydata)<-read.table(paste("C:/Users/sulin/Desktop/SamplPT/",GEOID,"_pd.txt",sep=""), header=F,row.names=1, sep="\t")
Group<- factor(pData(mydata)[,2] , levels = levels(pData(mydata)[,2]))
design<- model.matrix(~0+Group,data=pData(eset))
matrix<-data.matrix(eset)
write.table(matrix ,file=paste(GEOID,"_Exp_rma.txt",sep=""),row.names=T, sep="\t")
conlist<-c() # store contrast name list
for (i in 1:(length(colnames(design))-1))
{
for (j in (i+1):length(colnames(design)))
{
temchar<-paste(colnames(design)[i],"-",colnames(design)[j],sep="")
conlist<-append(conlist,temchar)
}
}
for(m in 1:length(conlist))
{
fit <-lmFit(matrix,design)
contrast.matrix <- makeContrasts(conlist[m],levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2<-eBayes(fit2)
t <- topTable(fit2,n=Inf,coef=1,adjust="fdr");
results <- t[which(t$adj.P.Val < 0.05),]
write.table(results ,file=paste(conlist[m],"_DEG_all.txt",sep=""),row.names=T, sep="\t")
up_genes <- results[which((results$logFC) > 1),]
write.table(up_genes ,file=paste(conlist[m],"_DEG_up.txt",sep=""),row.names=T, sep="\t")
down_genes <- results[which((results$logFC) < (-1) ),]
write.table(down_genes ,file=paste(conlist[m],"_DEG_dn.txt",sep=""),row.names=T, sep="\t")
#### Do GO enrichment analysis with topGO R #####
AllDifg= row.names(results)## all DEGs
geneList <- factor(as.integer(probeNames %in% AllDifg))
names(geneList) <- probeNames
str(geneList)
#print(levels(geneList))
if(length(levels(geneList)!=0)>1) #if <1, no DEGs detected.
{
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
test.stat <- new("classicScore", testStatistic = GOKSTest, name = "KS tests")
resultGO <- getSigGroups(GOdata, test.stat)
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
resulttopGO<- GenTable(GOdata, classic = resultFisher, KS = resultGO, weight = resultWeight,orderBy = "weight", ranksOf = "classic", topNodes = 20)
write.table(resulttopGO[resulttopGO$classic<0.01,],file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}else
{
Sout="No DEGs detected!"  # write thse setence into out files.
write.table(Sout,file=paste(conlist[m],"_Gene_GO_Enrichment_all.txt",sep=""),row.names = FALSE, col.names =TRUE)
}
}
}

